from sage.all import *
from Crypto.Util.number import isPrime, getRandomNBitInteger

print(getRandomNBitInteger(68))

def genPrimes(P, Q, l):
    r = 259412336263511759112
    return int(P(r)), int(Q(r))

var("x")

# Manually retyped coefficients to avoid hidden characters
P = 2847948613*x**7 + 3305316598*x**6 + 3842203267*x**5 + 3431982396*x**4 + 2380377272*x**3 + 3816048455*x**2 + 4290534204*x + 2378571209
Q = 3378269265*x**7 + 2605358264*x**6 + 3892229888*x**5 + 2653862544*x**4 + 3893610093*x**3 + 2932575439*x**2 + 2322600571*x + 2442728695

nbit = 512

p, q = genPrimes(P, Q, nbit)
print(p, q)


n = 60130547801168751450983574194169752606596547774564695794919298973251203587128237799602582911050022571941793197314565314876508860461087209144687558341117955877761335067848122512358149929745084363835027292307961660634453113069168408298081720503728087287329906197832876696742245078666352861209105027134133927
c = 15129303695051503318505193172155921684909431243538868778377472653134183034984012506799855760917107279844275732327557949646134247015031503441468669978820652020054856908495646419146697920950182671202962511480958513703999302195279666734261744679837757391212026023983284529606062512100507387854428089714836938

print(p*q)
